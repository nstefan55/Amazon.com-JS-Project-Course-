1) Main Idea of JavaScript

1. SAVE THE DATA

    data = information

    (info about our products)

    saved data in an object or arrays to create data structures



2. GENERATE html

    use the saved data to GENERATE

    loop through the array of data


    products.rating.stars * 10

    We are multiplying it by 10 beacuse it displays rating-4.5.png which needs to be rating-45.png


    priceCents / 100 to display it in dollars


    "js show number with 2 decimal places"




3. make it interactive






2) HTML Data Attribute

- html attribute that starts with "data"

example data-product-name: "${product.name}"



.dataset - gives us all data attributes that are signed to the button






3) Steps to adding to cart 

1. check if the product is already in the cart

2. if it is in the cart then we increase the quanity by 1

3. if its not then add it to cart





4) Making the Cart icon interactive

1. calculate the quantity

    loop through the array
    and add the quantity

2. put the quantity on the page





Lesson 14 - Modules

Modules features - no name conflicts


1. Create the Module 

    1. create a file
    2. don't load the file with script tag

    any variables we create inside the file will be contained inside the file


2. Get Variable out of a file

    1. add type="module" attribute
    2. export the variable
    3. import the variable to another js file


import needs to be on top of the page

Modules don't work by opening html files directly
You have to use live server!

import { cart as myCart } from "../data/cart.js"; to avoid naming conflicts

no worries about the order of files



Best Practice is to group related code together


To change so you can select one of each product 3 delivery options use code bellow


delivery-option-${matchingProduct.id}  instead of delivery-option-1




Deleting the Quantity from a product 

    1. remove the product from the cart

        1.1 attacvhing the product id to the delete link

        1.2 Steps for function removeFromCart

            1. create a new array

            2. loop through the array

            3. add to the array each product except the productId

        1.3 Removing the product from the page

            1. use the DOM to get the element to remove and save as a variable

            2. removing the saved variable with .remove() function 

    2. update the html




Lesson 15 Libraries


To get the dates in checkout 

    1. get today's date

    2. do calculations ( add 7 days)

    3. display the date in easy-to-read format



Best Practice in Programming for something complicated

- try to find an external library first.


example "javascript date library"



ESM Version of External Libraries to use JS Modules with External Libraries

ESM = EcmaScript Module

example "javascript date esm library"




deliveryOptionsHTML function Steps

    1. loop through deliveryOptions imported from deliveryOptions.JS

    2. for each option generate html

    3. combine all html together



const currentDate = dayjs();

const deliveryDate = currentDate.add(7, 'days'); //first param is the number of days and second is the lenght of time

console.log(deliveryDate.format('dddd, MMMM, D'));


adding data attributes for accessing



updating the page

adding all the code in a function and running the function at the end and after each function that calculates


MVC Method - Model-View-Controller ( Design Pattern ) used in Frameworks**

popular technique

    1. Model - all code that saves and manages the data 

        data folder files*

    2. View - takes the data and displays it on the page

    3. Controller - Event listeners that do something when we interact on the page


Controller updates the model and the process repeats




